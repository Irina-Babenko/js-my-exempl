//! function decloration

//! function expression

//! –¥–æ–∫ –∫–æ–º–º–µ–Ω—Ç
//*–≤—ã–∑–æ–≤ –¥–æ–ø.–∫–æ–º–º–µ–Ω—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ - /**
//* –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –¥–ø–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å

/**
 * Bue product, log message
 * @param {string} productName
 * @param {number} productQty
 * @param {number} price - price per one item
 * @return {string|number}
 */

//! arrow function - —Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

//* –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –µ—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π

//* –ø—Ä–∏–∏–º—É—â–µ—Å—Ç–≤–æ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–æ–º, —á—Ç–æ –µ—ë –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∫–∞–∫ —è–≤–Ω–æ–π —Ç–∞–∫ –∏ –Ω–µ —è–≤–Ω–æ–π

// const buyProduct = (productName, productQty, price) => {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`,
//   );

//   return 'hello world';
// };

// buyProduct('apple', 10, 35);
//!
//* —è–≤–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

//* –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–µ—Ç–µ—Ä–Ω

// const getTotalPrice = (qty, price) => {
//   return qty * price;
// };

// console.log(getTotalPrice(3, 150));

//!
//* –Ω–µ—è–≤–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

//* –≤ –Ω–µ—è–≤–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –º–æ–∂–µ–º –ø—Ä–∏–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (—Ç.–µ. –Ω–∞–º–±–µ—Ä –ø—Ä–∏–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–∏–Ω–≥)

// const getTotalPrice = (qty, price) => (qty * price).toString();

// console.log(typeof getTotalPrice(3, 150));

//! callback function

//* —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

// function add(a, b) {
//   return a + b;
// }
// console.log(add(5, 5)); //–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
// console.log(add); // —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é

//
// function logResult(a, b, callback) {
//   console.log(callback);
//   const result = callback(a, b);
//   console.log(`Resalt is ${result}`);
// }

// logResult(4, 5, add);
// logResult(4, 5, sum);

// function add(a, b) {
//   return a + b;
// }

// function sum(a, b) {
//   return a * b;
// }

//! –∏–Ω–ª–∞–π–Ω–æ–≤–∞—è  callback function

// function logResult(a, b, callback) {
//   console.log(callback);
//   const result = callback(a, b);
//   console.log(`Resalt is ${result}`);
// }

// logResult(4, 5, (a, b) => a + b);
// logResult(4, 5, (a, b) => a * b);

//! forEach –º–µ—Ç–æ–¥

//* –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –º–∞—Å–∏–∏–≤–∞—Ö

// const products = ['Apple', 'Banana', 'Orange', 'Mango', 'Watermellon'];

// products.forEach((product, idx, arr) => {
//   console.log('product', product);
//   console.log('idx', idx);
//   console.log('arr', arr);
// });

// const calculateTotalPrice = (orderedItems) => {
//   let totalPrice = 0;

//   orderedItems.forEach((item) => {
//     totalPrice += item;
//   });

//   return totalPrice;
// };

// console.log(calculateTotalPrice([12, 85, 37, 4]));

//! –ü–†–ê–ö–¢–ò–ö–ê

//* task-1

//* –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
//* createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É,
//* –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
//* logProduct(product) - –∫–æ–ª–±–±–µ–∫ —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
//* logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj,
//   };

//   callback(product);
// }

// function logProduct(product) {
//   console.log('Product', product);
// }

// function logTotalPrice({ price, quantity }) {
//   console.log(`Product total price ${price * quantity}`);
// }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);

//* task-2

//* –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
//* 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
//* 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
//*
//* –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// function each(arr, action) {
//   const items = [];

//   arr.forEach((elem) => {
//     const result = action(elem);
//     items.push(result);
//   });

//   return items;
// }

// console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
// console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));

//!

//! map

// const names = users.map((item, idx, arr) => {
//   return item.name;
// });

// console.log(names);

// const users = [
//   { id: 1, name: 'John', age: 28, skills: ['JavaScript', 'HTML', 'CSS'] },
//   { id: 2, name: 'Alice', age: 32, skills: ['Python', 'Data Analysis'] },
//   { id: 3, name: 'Bob', age: 24, skills: ['JavaScript', 'React', 'Node.js'] },
//   { id: 4, name: 'Emily', age: 40, skills: ['Java', 'Spring'] },
//   { id: 5, name: 'David', age: 22, skills: ['C++', 'C#'] },
// ];

//! flatMap

// const result = users.flatMap(({ skills }) => {
//   return skills;
// });
// console.log(result);

//! flat

// const numbers = [1, 2, 3, 4, [5, 6, [(7, 8)]]];
// const result = numbers.flat(2); // 2 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–∏—è

// console.log(result);

//! filter

// const users = [
//   { id: 1, name: 'John', age: 28, skills: ['JavaScript', 'HTML', 'CSS'] },
//   { id: 2, name: 'Alice', age: 32, skills: ['Python', 'Data Analysis'] },
//   { id: 3, name: 'Bob', age: 24, skills: ['JavaScript', 'React', 'Node.js'] },
//   { id: 4, name: 'Emily', age: 40, skills: ['Java', 'Spring'] },
//   { id: 5, name: 'David', age: 22, skills: ['C++', 'C#'] },
// ];

// const result = users.filter((user, idx, arr) => {});

// const result = arr.filter((skill, idx, array) => array.indexOf(skill) === idx); // —É–Ω–∏–∫–∞–ª—å–Ω—ñ–π –º–∞—Å—Å–∏–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —î–ª–µ–º–µ–Ω—Ç–æ–≤

//! finde

// const result = users.finde((user) => user.skills.includes('HTML'));
// console.log(result);

//! findeIndex

// const idx = users.findIndex((user) => user.id === 3);
// console.log(idx);

//! some
// const isKnow = users.some((user) => user.skills.includes('Python'));
// console.log(isKnow);

//! every

// const result = users.every((user) => user.age > 20 && user.age < 70);
// console.log(result);

//! sort

// const result = users.sort((a, b) => a.age - b.age);
// console.log(result);

//! reduce
// const result = users.reduce((acc, item) => {}, 0);
// acc += item.age;
// console.log(result);

//! –ü–†–ê–ö–¢–ò–ö–ê

//* Task-1
//* –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ map, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, –≤ —è–∫–æ–º—É –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.

// const students = [
//   { name: 'John', grades: [80, 85, 90] },
//   { name: 'Alice', grades: [90, 95, 92] },
//   { name: 'Bob', grades: [70, 80, 75] },
//   { name: 'Emily', grades: [95, 92, 88] },
//   { name: 'David', grades: [] },
// ];

// const studentsGrades = students.map((student) => student.grades);
// console.log(studentsGrades);

// function getAverage(arr) {
//   return arr.map(({ name, grades }) => {
//     const total = grades.reduce((acc, value) => acc + value, 0);
//     return {
//       name,
//       average: grades.length ? Math.round(total / grades.length) : total,
//     };
//   });
// }
// console.log(getAverage(students));

//* Task-2
//* –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ filter, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ —è–∫—ñ —Å—Ç–∞—Ä—à–µ 20 —Ä–æ–∫—ñ–≤

// const students = [
//   { name: 'John', age: 20, gpa: 3.8 },
//   { name: 'Alice', age: 21, gpa: 3.2 },
//   { name: 'Bob', age: 19, gpa: 3.5 },
//   { name: 'Emily', age: 22, gpa: 3.9 },
//   { name: 'David', age: 20, gpa: 3.7 },
// ];

// function getAdult(arr) {
//   return arr.filter(({ age }) => age > 20).map(({ name }) => name);
// }
// console.log(getAdult(students));

//* Task-3
//* –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ—Ç–æ–¥ find, —â–æ–± –∑–Ω–∞–π—Ç–∏ –∫–Ω–∏–∂–∫—É –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é (title).
//* –Ø–∫—â–æ –∫–Ω–∏–≥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä—è–¥–æ–∫ 'Not found'.

// const books = [
//   {
//     title: 'JavaScript: The Good Parts',
//     author: 'Douglas Crockford',
//     year: 2008,
//   },
//   {
//     title: 'Clean Code: A Handbook of Agile Software Craftsmanship',
//     author: 'Robert C. Martin',
//     year: 2008,
//   },
//   {
//     title: 'The Pragmatic Programmer: Your Journey to Mastery',
//     author: 'Andrew Hunt, David Thomas',
//     year: 1999,
//   },
//   {
//     title: 'Design Patterns: Elements of Reusable Object-Oriented Software',
//     author: 'Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides',
//     year: 1994,
//   },
//   {
//     title: 'Refactoring: Improving the Design of Existing Code',
//     author: 'Martin Fowler',
//     year: 1999,
//   },
// ];

// function getBook(arr, title) {
//   const book = arr.find(({ title: bookTitle }) => bookTitle === title);

//   return book || 'Not found';
// }

// console.log(
//   getBook(
//     books,
//     'Design Patterns: Elements of Reusable Object-Oriented Software',
//   ),
// );
